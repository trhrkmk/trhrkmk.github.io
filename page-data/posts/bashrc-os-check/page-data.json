{"componentChunkName":"component---src-gatsby-theme-blog-core-templates-post-query-js","path":"/posts/bashrc-os-check/","result":{"data":{"site":{"siteMetadata":{"title":"trhrkmk.com","social":[{"name":"Twitter","url":"https://twitter.com/trhrkmk"},{"name":"GitHub","url":"https://github.com/trhrkmk"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"59834a8f-5195-5ec0-9ea3-d7d9f91d4acc","excerpt":"最近、 .bashrc や .vimrc など、見直してました。 macOSで利用している .bashrc を、Linuxでも利用したいと思ったからです。 ということで、自分用のメモ。 .bashrc .bashrc は、シンプルに外部ファイルを読み込むだけにしました。 git…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \".bashrcでOSを確認する\",\n  \"date\": \"2018-10-08T14:43:10.000Z\",\n  \"lastmod\": \"2018-10-08T14:43:10.000Z\",\n  \"tags\": [\".bashrc\", \"cli\"],\n  \"slug\": \"/posts/bashrc-os-check/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u6700\\u8FD1\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bashrc\"), \"\\u3084\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".vimrc\"), \"\\u306A\\u3069\\u3001\\u898B\\u76F4\\u3057\\u3066\\u307E\\u3057\\u305F\\u3002\"), mdx(\"p\", null, \"macOS\\u3067\\u5229\\u7528\\u3057\\u3066\\u3044\\u308B\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bashrc\"), \"\\u3092\\u3001Linux\\u3067\\u3082\\u5229\\u7528\\u3057\\u305F\\u3044\\u3068\\u601D\\u3063\\u305F\\u304B\\u3089\\u3067\\u3059\\u3002\"), mdx(\"p\", null, \"\\u3068\\u3044\\u3046\\u3053\\u3068\\u3067\\u3001\\u81EA\\u5206\\u7528\\u306E\\u30E1\\u30E2\\u3002\"), mdx(\"h2\", {\n    \"id\": \"bashrc\"\n  }, \".bashrc\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bashrc\"), \"\\u306F\\u3001\\u30B7\\u30F3\\u30D7\\u30EB\\u306B\\u5916\\u90E8\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u8AAD\\u307F\\u8FBC\\u3080\\u3060\\u3051\\u306B\\u3057\\u307E\\u3057\\u305F\\u3002\"), mdx(\"p\", null, \"git\\u30EA\\u30DD\\u30B8\\u30C8\\u30EA\\u306F\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ghq\"), \"\\u3067\\u7BA1\\u7406\\u3057\\u3066\\u3044\\u308B\\u306E\\u3067\\u3001\\u3053\\u3093\\u306A\\u611F\\u3058\\u3002\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \". $HOME/go/src/gitlab.com/teruhirokomaki/dotfiles/.bash_bashrc.bash\\n. $HOME/go/src/gitlab.com/teruhirokomaki/dotfiles/.bash_alias.bash\\n. $HOME/go/src/gitlab.com/teruhirokomaki/dotfiles/.bash_function.bash\\n\")), mdx(\"h2\", {\n    \"id\": \"bash_bashrcbash\"\n  }, \".bash_bashrc.bash\"), mdx(\"p\", null, \"\\u30D5\\u30A1\\u30A4\\u30EB\\u306E\\u4E00\\u90E8\\u3092\\u5207\\u308A\\u53D6\\u3063\\u3066\\u3044\\u307E\\u3059\\u3002\"), mdx(\"p\", null, \"\\u3053\\u3093\\u306A\\u611F\\u3058\\u3067\\u8A18\\u8FF0\\u3057\\u307E\\u3057\\u305F\\u3002\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#--------------------------------------------------\\n# os\\n#--------------------------------------------------\\nif [ \\\"`uname`\\\" == \\\"Darwin\\\" ]; then\\n  ISMAC=true\\nelif [ \\\"`uname`\\\" == \\\"Linux\\\" ]; then\\n  ISLINUX=true\\nfi\\n\\n#--------------------------------------------------\\n# fzf\\n#--------------------------------------------------\\n\\nif [ $ISLINUX ]; then\\n  [ -f ~/.fzf.bash ] && source ~/.fzf.bash\\nfi\\n\")), mdx(\"h2\", {\n    \"id\": \"ファイル名についての模索\"\n  }, \"\\u30D5\\u30A1\\u30A4\\u30EB\\u540D\\u306B\\u3064\\u3044\\u3066\\u306E\\u6A21\\u7D22\"), mdx(\"p\", null, \"\\u30D5\\u30A1\\u30A4\\u30EB\\u540D\\u306E\\u898F\\u5247\\u3063\\u3066\\u3069\\u3093\\u306A\\u611F\\u3058\\u306A\\u3093\\u3067\\u3057\\u3087\\u3046\\u304B\\u306D\\uFF1F\"), mdx(\"p\", null, \"gcp\\u306Esdk\\u3092\\u30A4\\u30F3\\u30B9\\u30C8\\u30FC\\u30EB\\u3057\\u305F\\u969B\\u306B\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bash_profile\"), \"\\u306B\\u8FFD\\u8A18\\u3055\\u308C\\u305F\\u306E\\u304C\\u3001\\u3053\\u3061\\u3089\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path.bash.inc\"), \"\\u3068\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"completion.bash.inc\"), \"\\u3068\\u3044\\u3046\\u30D5\\u30A1\\u30A4\\u30EB\\u540D\\u306A\\u3093\\u3067\\u3059\\u306D\\u3002\"), mdx(\"p\", null, \"\\u5148\\u7A0B\\u306E\\u5916\\u90E8\\u30D5\\u30A1\\u30A4\\u30EB\\u306F\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bash_bashrc.bash\"), \"\\u3068\\u3057\\u3066\\u307E\\u3059\\u304C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bashrc.bash.inc\"), \"\\u306B\\u3057\\u3066\\u3082\\u826F\\u3044\\u304B\\u3082\\u3057\\u308C\\u306A\\u3044\\u3002\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# The next line updates PATH for the Google Cloud SDK.\\nif [ -f '/Users/teruhirokomaki/google-cloud-sdk/path.bash.inc' ]; then source '/Users/teruhirokomaki/google-cloud-sdk/path.bash.inc'; fi\\n\\n# The next line enables shell command completion for gcloud.\\nif [ -f '/Users/teruhirokomaki/google-cloud-sdk/completion.bash.inc' ]; then source '/Users/teruhirokomaki/google-cloud-sdk/completion.bash.inc'; fi\\n\")), mdx(\"h2\", {\n    \"id\": \"ググってみた\"\n  }, \"\\u30B0\\u30B0\\u3063\\u3066\\u307F\\u305F\"), mdx(\"p\", null, \"\\u30B0\\u30B0\\u3063\\u3066\\u307F\\u308B\\u3068\\u2026\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/394230/how-to-detect-the-os-from-a-bash-script\"\n  }), \"How to detect the OS from a Bash script?\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"uname\"), \"\\u3068\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$OSTYPE\"), \"\\u306E\\u30D1\\u30BF\\u30FC\\u30F3\\u304C\\u3042\\u308A\\u307E\\u3057\\u305F\\u304C\\u3001macOS\\u306E\\u5834\\u5408\\u306E\\u8A18\\u8FF0\\u304C\\u30B7\\u30F3\\u30D7\\u30EB\\u306A\\u306E\\u3067\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"uname\"), \"\\u306B\\u3057\\u307E\\u3057\\u305F\\u3002\"), mdx(\"h3\", {\n    \"id\": \"uname\"\n  }, \"uname\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"platform='unknown'\\nunamestr=`uname`\\nif [[ \\\"$unamestr\\\" == 'Linux' ]]; then\\n   platform='linux'\\nelif [[ \\\"$unamestr\\\" == 'FreeBSD' ]]; then\\n   platform='freebsd'\\nfi\\n\")), mdx(\"h3\", {\n    \"id\": \"ostype\"\n  }, \"$OSTYPE\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"if [[ \\\"$OSTYPE\\\" == \\\"linux-gnu\\\" ]]; then\\n        # ...\\nelif [[ \\\"$OSTYPE\\\" == \\\"darwin\\\"* ]]; then\\n        # Mac OSX\\nelif [[ \\\"$OSTYPE\\\" == \\\"cygwin\\\" ]]; then\\n        # POSIX compatibility layer and Linux environment emulation for Windows\\nelif [[ \\\"$OSTYPE\\\" == \\\"msys\\\" ]]; then\\n        # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)\\nelif [[ \\\"$OSTYPE\\\" == \\\"win32\\\" ]]; then\\n        # I'm not sure this can happen.\\nelif [[ \\\"$OSTYPE\\\" == \\\"freebsd\\\"* ]]; then\\n        # ...\\nelse\\n        # Unknown.\\nfi\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"case \\\"$OSTYPE\\\" in\\n  solaris*) echo \\\"SOLARIS\\\" ;;\\n  darwin*)  echo \\\"OSX\\\" ;;\\n  linux*)   echo \\\"LINUX\\\" ;;\\n  bsd*)     echo \\\"BSD\\\" ;;\\n  msys*)    echo \\\"WINDOWS\\\" ;;\\n  *)        echo \\\"unknown: $OSTYPE\\\" ;;\\nesac\\n\")), mdx(\"h2\", {\n    \"id\": \"参考にしました\"\n  }, \"\\u53C2\\u8003\\u306B\\u3057\\u307E\\u3057\\u305F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/394230/how-to-detect-the-os-from-a-bash-script\"\n  }), \"How to detect the OS from a Bash script?\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://qiita.com/UmedaTakefumi/items/fe02d17264de6c78443d\"\n  }), \"\\u30B7\\u30A7\\u30EB\\u30B9\\u30AF\\u30EA\\u30D7\\u30C8\\u3067OS\\u3092\\u5224\\u5225\\u3059\\u308B\"))));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/posts/bashrc-os-check/","title":".bashrcでOSを確認する","tags":[".bashrc","cli"],"keywords":[],"date":"2018-10-08","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"ae2e0c81-789b-55cf-97a1-04a56344fb9e","excerpt":"LightsailのRedmineで、Let's Encryptを使っていて、手動更新するときのメモです。 sshの設定もメモっとく。 Lightsailのsshキーをダウンロードする Lightsailのsshキーをダウンロードして ~/.ssh に移動しておく。 vim…","slug":"/posts/lightsail-bitnami-redmine-letsencrypt/","title":"LightsailのRedmine(Bitnami)でLet's Encryptを手動更新するときのメモ","date":"2018-09-30"},"next":{"__typename":"MdxBlogPost","id":"1baf7b88-3302-58c8-b17c-67eebd50a9d5","excerpt":"タイトルの通りですが、自分なりにfzfを使ってターミナルでの作業を効率化できたので、メモ。 すごく快適になるので、試してみてほしいです！ fzfを使うと、どのように効率化できるのか？ ターミナル内でのディレクトリの移動が快適にできるようになります。 以下のgif…","slug":"/posts/fzf-command-line-productivity-tools/","title":"fzfを使ってターミナルでの作業を効率化する","date":"2018-10-18"}},"pageContext":{"id":"59834a8f-5195-5ec0-9ea3-d7d9f91d4acc","previousId":"ae2e0c81-789b-55cf-97a1-04a56344fb9e","nextId":"1baf7b88-3302-58c8-b17c-67eebd50a9d5"}}}